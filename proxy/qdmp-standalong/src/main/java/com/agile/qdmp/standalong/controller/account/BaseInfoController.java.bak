package com.agile.qdmp.standalong.controller.account;

import com.agile.qdmp.standalong.model.dto.account.BaseInfoDTO;
import com.agile.qdmp.standalong.model.dto.account.query.BaseInfoQueryDTO;
import com.agile.qdmp.standalong.model.convert.account.BaseInfoConverter;
import com.agile.qdmp.standalong.model.entity.account.BaseInfo;
import com.agile.qdmp.standalong.service.account.IBaseInfoService;
import com.agile.tem.common.core.controller.SuperController;
import com.agile.tem.common.core.controller.exception.BizException;
import com.agile.tem.common.core.util.R;
import com.baomidou.mybatisplus.core.metadata.IPage;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.web.bind.annotation.*;

/**
 * 个人信息表 前端控制器
 *
 * @author wenbinglei
 * @date 2021-03-23 18:00:27
 */
@Slf4j
@RestController
@RequestMapping("/api" )
@Api(value = "baseInfo", tags = "个人信息表管理")
public class BaseInfoController extends SuperController {

    private final IBaseInfoService baseInfoService;

    public BaseInfoController(IBaseInfoService baseInfoService) {
        this.baseInfoService = baseInfoService;
    }


    /**
     * 新增个人信息表
     * @param baseInfoDTO 个人信息表
     * @return
     */
    @ApiOperation(value = "新增个人信息表", notes = "新增个人信息表")
    @PostMapping("/baseInfo")
    public R<BaseInfoDTO> createBaseInfo(@RequestBody BaseInfoDTO baseInfoDTO) {
        log.debug("REST request to save BaseInfo : {}", baseInfoDTO);
        if (baseInfoDTO.getId() != null) {
            throw new BizException("id exists");
        }
        BaseInfo data = BaseInfoConverter.INSTANCE.from(baseInfoDTO);
        boolean result = baseInfoService.save(data);
        if(result) {
            baseInfoDTO.setId(data.getId());
            return R.ok(baseInfoDTO, "添加成功");
        } else {
            return R.failed(baseInfoDTO, "添加失败");
        }
    }

    /**
     * 修改个人信息表
     * @param baseInfoDTO 个人信息表
     * @return
     */
    @ApiOperation(value = "修改个人信息表", notes = "修改个人信息表")
    @PutMapping("/baseInfo")
    public R<BaseInfoDTO> updateBaseInfo(@RequestBody BaseInfoDTO baseInfoDTO) {
        log.debug("REST request to update BaseInfo : {}", baseInfoDTO);
        if (baseInfoDTO.getId() == null) {
            throw new BizException("id null");
        }
        BaseInfo data = BaseInfoConverter.INSTANCE.from(baseInfoDTO);
        boolean result = baseInfoService.updateById(data);
        return result ? R.ok(baseInfoDTO, "修改成功") : R.failed(baseInfoDTO, "修改失败");
    }

    /**
     * 根据查询条件获取分页数据
     * @param queryDTO 个人信息表
     * @return
     */
    @ApiOperation(value = "分页查询", notes = "分页查询")
    @GetMapping("/baseInfoes")
    public R<IPage<BaseInfoDTO>> getAllBaseInfos(BaseInfoQueryDTO queryDTO) {
        log.debug("REST request to get a page of BaseInfoes");
        String[] ascParameters = null;
        String[] descParameters = null;
        if(StringUtils.isNotBlank(queryDTO.getAscParameter())) {
            ascParameters = new String[] {queryDTO.getAscParameter()};
        }
        if(StringUtils.isNotBlank(queryDTO.getDescParameter())) {
            descParameters = new String[] {queryDTO.getDescParameter()};
        }
        IPage<BaseInfoDTO> result = baseInfoService.lambdaQuery()
                .page(this.<BaseInfo>getPage(queryDTO.getCursor(), queryDTO.getLimit(), queryDTO.getSearchCount(), ascParameters, descParameters))
                .convert(dto -> BaseInfoConverter.INSTANCE.to(dto));
        return R.ok(result, "查询列表成功");
    }

    /**
     * 根据ID获取个人信息表
     * @param id id
     * @return
     */
    @ApiOperation(value = "通过id查询", notes = "通过id查询")
    @GetMapping("/baseInfo/{id}")
    public R<BaseInfoDTO> getBaseInfo(@PathVariable Long id) {
        log.debug("REST request to get BaseInfo : {}", id);
        BaseInfo baseInfo = baseInfoService.getById(id);
        return baseInfo == null ? R.failed("未查询到数据") : R.ok(BaseInfoConverter.INSTANCE.to(baseInfo), "查询成功");
    }

    /**
     * 通过id删除个人信息表
     * @param id id
     * @return
     */
    @ApiOperation(value = "通过id删除个人信息表", notes = "通过id删除个人信息表")
    @DeleteMapping("/baseInfo/{id}")
    public R deleteBaseInfo(@PathVariable Long id) {
        log.debug("REST request to delete BaseInfos : {}", id);
        return baseInfoService.removeById(id) ? R.ok("删除成功") : R.failed("删除失败");
    }
}
