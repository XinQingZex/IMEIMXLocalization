package com.agile.qdmp.standalong.controller.account;

import com.agile.qdmp.standalong.model.dto.account.AddressDTO;
import com.agile.qdmp.standalong.model.dto.account.query.AddressQueryDTO;
import com.agile.qdmp.standalong.model.convert.account.AddressConverter;
import com.agile.qdmp.standalong.model.entity.account.Address;
import com.agile.qdmp.standalong.service.account.IAddressService;
import com.agile.tem.common.core.controller.SuperController;
import com.agile.tem.common.core.controller.exception.BizException;
import com.agile.tem.common.core.util.R;
import com.baomidou.mybatisplus.core.metadata.IPage;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.web.bind.annotation.*;

/**
 * 用户收货地址表 前端控制器
 *
 * @author wenbinglei
 * @date 2021-03-23 18:00:37
 */
@Slf4j
@RestController
@RequestMapping("/api" )
@Api(value = "address", tags = "用户收货地址表管理")
public class AddressController extends SuperController {

    private final IAddressService addressService;

    public AddressController(IAddressService addressService) {
        this.addressService = addressService;
    }


    /**
     * 新增用户收货地址表
     * @param addressDTO 用户收货地址表
     * @return
     */
    @ApiOperation(value = "新增用户收货地址表", notes = "新增用户收货地址表")
    @PostMapping("/address")
    public R<AddressDTO> createAddress(@RequestBody AddressDTO addressDTO) {
        log.debug("REST request to save Address : {}", addressDTO);
        if (addressDTO.getId() != null) {
            throw new BizException("id exists");
        }
        Address data = AddressConverter.INSTANCE.from(addressDTO);
        boolean result = addressService.save(data);
        if(result) {
            addressDTO.setId(data.getId());
            return R.ok(addressDTO, "添加成功");
        } else {
            return R.failed(addressDTO, "添加失败");
        }
    }

    /**
     * 修改用户收货地址表
     * @param addressDTO 用户收货地址表
     * @return
     */
    @ApiOperation(value = "修改用户收货地址表", notes = "修改用户收货地址表")
    @PutMapping("/address")
    public R<AddressDTO> updateAddress(@RequestBody AddressDTO addressDTO) {
        log.debug("REST request to update Address : {}", addressDTO);
        if (addressDTO.getId() == null) {
            throw new BizException("id null");
        }
        Address data = AddressConverter.INSTANCE.from(addressDTO);
        boolean result = addressService.updateById(data);
        return result ? R.ok(addressDTO, "修改成功") : R.failed(addressDTO, "修改失败");
    }

    /**
     * 根据查询条件获取分页数据
     * @param queryDTO 用户收货地址表
     * @return
     */
    @ApiOperation(value = "分页查询", notes = "分页查询")
    @GetMapping("/addresses")
    public R<IPage<AddressDTO>> getAllAddresss(AddressQueryDTO queryDTO) {
        log.debug("REST request to get a page of Addresses");
        String[] ascParameters = null;
        String[] descParameters = null;
        if(StringUtils.isNotBlank(queryDTO.getAscParameter())) {
            ascParameters = new String[] {queryDTO.getAscParameter()};
        }
        if(StringUtils.isNotBlank(queryDTO.getDescParameter())) {
            descParameters = new String[] {queryDTO.getDescParameter()};
        }
        IPage<AddressDTO> result = addressService.lambdaQuery()
                .page(this.<Address>getPage(queryDTO.getCursor(), queryDTO.getLimit(), queryDTO.getSearchCount(), ascParameters, descParameters))
                .convert(dto -> AddressConverter.INSTANCE.to(dto));
        return R.ok(result, "查询列表成功");
    }

    /**
     * 根据ID获取用户收货地址表
     * @param id id
     * @return
     */
    @ApiOperation(value = "通过id查询", notes = "通过id查询")
    @GetMapping("/address/{id}")
    public R<AddressDTO> getAddress(@PathVariable Long id) {
        log.debug("REST request to get Address : {}", id);
        Address address = addressService.getById(id);
        return address == null ? R.failed("未查询到数据") : R.ok(AddressConverter.INSTANCE.to(address), "查询成功");
    }

    /**
     * 通过id删除用户收货地址表
     * @param id id
     * @return
     */
    @ApiOperation(value = "通过id删除用户收货地址表", notes = "通过id删除用户收货地址表")
    @DeleteMapping("/address/{id}")
    public R deleteAddress(@PathVariable Long id) {
        log.debug("REST request to delete Addresss : {}", id);
        return addressService.removeById(id) ? R.ok("删除成功") : R.failed("删除失败");
    }
}
