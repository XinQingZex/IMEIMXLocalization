package com.agile.qdmp.standalong.controller.organization;

import com.agile.qdmp.standalong.model.dto.organization.StaffDTO;
import com.agile.qdmp.standalong.model.dto.organization.query.StaffQueryDTO;
import com.agile.qdmp.standalong.model.convert.organization.StaffConverter;
import com.agile.qdmp.standalong.model.entity.organization.Staff;
import com.agile.qdmp.standalong.service.organization.IStaffService;
import com.agile.tem.common.core.controller.SuperController;
import com.agile.tem.common.core.controller.exception.BizException;
import com.agile.tem.common.core.util.R;
import com.baomidou.mybatisplus.core.metadata.IPage;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.web.bind.annotation.*;

import java.util.Objects;


/**
 * 职员表 前端控制器
 *
 * @author wenbinglei
 * @date 2022-04-26 16:16:41
 */
@Slf4j
@RestController
@RequestMapping("/api" )
@Api(value = "staff", tags = "职员表管理")
public class StaffController extends SuperController {

    private final IStaffService staffService;

    public StaffController(IStaffService staffService) {
        this.staffService = staffService;
    }

    /**
     * 新增职员表
     * @param staffDTO 职员表
     * @return
     */
    @ApiOperation(value = "新增职员表", notes = "新增职员表")
    @PostMapping("/staff")
    public R<StaffDTO> createStaff(@RequestBody StaffDTO staffDTO) {
        log.debug("REST request to save Staff : {}", staffDTO);
        if (staffDTO.getId() != null) {
            throw new BizException("不能包含主键");
        }
        Staff data = staffService.lambdaQuery().eq(Staff::getCompanyId, staffDTO.getCompanyId()).eq(Staff::getAccountId, staffDTO.getAccountId()).one();
        boolean result;
        if(data == null) {
            Staff newData = StaffConverter.INSTANCE.from(staffDTO);
            newData.setCreateTime((int) (System.currentTimeMillis()/1000));
            newData.setState(false);
            result = staffService.save(newData);
            staffDTO.setId(newData.getId());
        } else {
            staffDTO.setId(data.getId());
            result = true;
        }
        if(result) {
            return R.ok(staffDTO, "添加成功");
        } else {
            return R.failed(staffDTO, "添加失败");
        }
    }

    /**
     * 修改职员表
     * @param staffDTO 职员表
     * @return
     */
    @ApiOperation(value = "修改职员表", notes = "修改职员表")
    @PutMapping("/staff")
    public R<StaffDTO> updateStaff(@RequestBody StaffDTO staffDTO) {
        log.debug("REST request to update Staff : {}", staffDTO);
        if (staffDTO.getId() == null) {
            throw new BizException("缺少主键");
        }
        Staff data = StaffConverter.INSTANCE.from(staffDTO);
        return staffService.updateById(data) ? R.ok(staffDTO, "修改成功") : R.failed(staffDTO, "修改失败");
    }

    /**
     * 根据查询条件获取分页数据
     * @param queryDTO 职员表
     * @return
     */
    @ApiOperation(value = "分页查询职员表", notes = "分页查询职员表")
    // @JsonFieldFilter(type = StaffDTO.class, include = {"id", ""})
    // @JsonFieldFilter(type = StaffDTO.class, exclude = {"id", ""})
    // @JsonFieldFilter(type = IPage.class, exclude = {"optimizeCountSql", "hitCount", "orders", "searchCount"})
    // @JsonFieldFilters( value = {
    //     @JsonFieldFilter(type = StaffDTO.class, include = {"id", "username", "mobile"}),
    //     @JsonFieldFilter(type = StaffDTO.class, include = {"id", "username", "mobile"})
    // })
    // @Desensitization
    @GetMapping("/staffs")
    public R<IPage<StaffDTO>> getAllStaffs(StaffQueryDTO queryDTO) {
        log.debug("REST request to get a page of Staffs");
        String[] ascParameters = null;
        String[] descParameters = null;
        if(StringUtils.isNotBlank(queryDTO.getAscParameter())) {
            ascParameters = new String[] {queryDTO.getAscParameter()};
        }
        if(StringUtils.isNotBlank(queryDTO.getDescParameter())) {
            descParameters = new String[] {queryDTO.getDescParameter()};
        }
        IPage<StaffDTO> result = staffService.lambdaQuery()
                .like(StringUtils.isNotEmpty(queryDTO.getName()), Staff::getName, queryDTO.getName())
//                .eq(StringUtils.isNotEmpty(queryDTO.getClassName()), Staff::getClassName, queryDTO.getClassName())
                .eq(Objects.nonNull(queryDTO.getAccountId()), Staff::getAccountId, queryDTO.getAccountId())
                .eq(Objects.nonNull(queryDTO.getState()), Staff::getState, queryDTO.getState())
                .page(this.<Staff>getPage(queryDTO.getCursor(), queryDTO.getLimit(), queryDTO.getSearchCount(), ascParameters, descParameters))
                .convert(dto -> StaffConverter.INSTANCE.to(dto));
        return R.ok(result, "查询列表成功");
    }

    /**
     * 根据ID获取职员表
     * @param id id
     * @return
     */
    @ApiOperation(value = "通过id查询职员表", notes = "通过id查询职员表")
    // @JsonFieldFilter(type = StaffDTO.class, include = {"id", ""})
    // @JsonFieldFilter(type = StaffDTO.class, exclude = {"id", ""})
    // @JsonFieldFilters( value = {
    //     @JsonFieldFilter(type = StaffDTO.class, include = {"id", "username", "mobile"}),
    //     @JsonFieldFilter(type = StaffDTO.class, include = {"id", "username", "mobile"})
    // })
    // @Desensitization
    @GetMapping("/staff/{id}")
    public R<StaffDTO> getStaff(@PathVariable Long id) {
        log.debug("REST request to get Staff : {}", id);
        Staff staff = staffService.getById(id);
        return staff == null ? R.failed("未查询到数据") : R.ok(StaffConverter.INSTANCE.to(staff), "查询成功");
    }

    /**
     * 通过id删除职员表
     * @param id id
     * @return
     */
    @ApiOperation(value = "通过id删除职员表", notes = "通过id删除职员表")
    @DeleteMapping("/staff/{id}")
    public R deleteStaff(@PathVariable Long id) {
        log.debug("REST request to delete Staffs : {}", id);
        return staffService.removeById(id) ? R.ok("删除成功") : R.failed("删除失败");
    }
}
