package com.agile.qdmp.standalong.controller.account;

import com.agile.qdmp.standalong.model.convert.account.SocialRelationConverter;
import com.agile.qdmp.standalong.model.dto.account.SocialRelationDTO;
import com.agile.qdmp.standalong.model.dto.account.query.SocialRelationQueryDTO;
import com.agile.qdmp.standalong.model.entity.account.SocialRelation;
import com.agile.qdmp.standalong.service.account.ISocialRelationService;
import com.agile.tem.common.core.controller.SuperController;
import com.agile.tem.common.core.controller.exception.BizException;
import com.agile.tem.common.core.util.R;
import com.baomidou.mybatisplus.core.metadata.IPage;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.web.bind.annotation.*;

/**
 * 社会化用户与系统用户关系表 前端控制器
 *
 * @author wenbinglei
 * @date 2021-03-23 18:00:17
 */
@Slf4j
@RestController
@RequestMapping("/api" )
@Api(value = "socialRelation", tags = "社会化用户与系统用户关系表管理")
public class SocialRelationController extends SuperController {

    private final ISocialRelationService socialRelationService;

    public SocialRelationController(ISocialRelationService socialRelationService) {
        this.socialRelationService = socialRelationService;
    }


    /**
     * 新增社会化用户与系统用户关系表
     * @param socialRelationDTO 社会化用户与系统用户关系表
     * @return
     */
    @ApiOperation(value = "新增社会化用户与系统用户关系表", notes = "新增社会化用户与系统用户关系表")
    @PostMapping("/socialRelation")
    public R<SocialRelationDTO> createSocialRelation(@RequestBody SocialRelationDTO socialRelationDTO) {
        log.debug("REST request to save SocialRelation : {}", socialRelationDTO);
        if (socialRelationDTO.getId() != null) {
            throw new BizException("id exists");
        }
        SocialRelation data = SocialRelationConverter.INSTANCE.from(socialRelationDTO);
        boolean result = socialRelationService.save(data);
        if(result) {
            socialRelationDTO.setId(data.getId());
            return R.ok(socialRelationDTO, "添加成功");
        } else {
            return R.failed(socialRelationDTO, "添加失败");
        }
    }

    /**
     * 修改社会化用户与系统用户关系表
     * @param socialRelationDTO 社会化用户与系统用户关系表
     * @return
     */
    @ApiOperation(value = "修改社会化用户与系统用户关系表", notes = "修改社会化用户与系统用户关系表")
    @PutMapping("/socialRelation")
    public R<SocialRelationDTO> updateSocialRelation(@RequestBody SocialRelationDTO socialRelationDTO) {
        log.debug("REST request to update SocialRelation : {}", socialRelationDTO);
        if (socialRelationDTO.getId() == null) {
            throw new BizException("id null");
        }
        SocialRelation data = SocialRelationConverter.INSTANCE.from(socialRelationDTO);
        boolean result = socialRelationService.updateById(data);
        return result ? R.ok(socialRelationDTO, "修改成功") : R.failed(socialRelationDTO, "修改失败");
    }

    /**
     * 根据查询条件获取分页数据
     * @param queryDTO 社会化用户与系统用户关系表
     * @return
     */
    @ApiOperation(value = "分页查询", notes = "分页查询")
    @GetMapping("/socialRelations")
    public R<IPage<SocialRelationDTO>> getAllSocialRelations(SocialRelationQueryDTO queryDTO) {
        log.debug("REST request to get a page of SocialRelations");
        String[] ascParameters = null;
        String[] descParameters = null;
        if(StringUtils.isNotBlank(queryDTO.getAscParameter())) {
            ascParameters = new String[] {queryDTO.getAscParameter()};
        }
        if(StringUtils.isNotBlank(queryDTO.getDescParameter())) {
            descParameters = new String[] {queryDTO.getDescParameter()};
        }
        IPage<SocialRelationDTO> result = socialRelationService.lambdaQuery()
                .page(this.<SocialRelation>getPage(queryDTO.getCursor(), queryDTO.getLimit(), queryDTO.getSearchCount(), ascParameters, descParameters))
                .convert(dto -> SocialRelationConverter.INSTANCE.to(dto));
        return R.ok(result, "查询列表成功");
    }

    /**
     * 根据ID获取社会化用户与系统用户关系表
     * @param accountId id
     * @return
     */
    @ApiOperation(value = "通过id查询", notes = "通过id查询")
    @GetMapping("/socialRelation/{accountId}")
    public R<SocialRelationDTO> getSocialRelation(@PathVariable Long accountId) {
        log.debug("REST request to get SocialRelation : {}", accountId);
        SocialRelation socialRelation = socialRelationService.getById(accountId);
        return socialRelation == null ? R.failed("未查询到数据") : R.ok(SocialRelationConverter.INSTANCE.to(socialRelation), "查询成功");
    }

    /**
     * 通过id删除社会化用户与系统用户关系表
     * @param id id
     * @return
     */
    @ApiOperation(value = "通过id删除社会化用户与系统用户关系表", notes = "通过id删除社会化用户与系统用户关系表")
    @DeleteMapping("/socialRelation/{id}")
    public R deleteSocialRelation(@PathVariable Long id) {
        log.debug("REST request to delete SocialRelations : {}", id);
        return socialRelationService.removeById(id) ? R.ok("删除成功") : R.failed("删除失败");
    }
}
