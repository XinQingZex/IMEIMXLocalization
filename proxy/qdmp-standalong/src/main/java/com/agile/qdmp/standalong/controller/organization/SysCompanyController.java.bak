package com.agile.qdmp.standalong.controller.organization;

import com.agile.qdmp.standalong.model.dto.organization.SysCompanyDTO;
import com.agile.qdmp.standalong.model.dto.organization.query.SysCompanyQueryDTO;
import com.agile.qdmp.standalong.model.convert.organization.SysCompanyConverter;
import com.agile.qdmp.standalong.model.entity.organization.SysCompany;
import com.agile.qdmp.standalong.service.organization.ISysCompanyService;
import com.agile.tem.common.core.controller.SuperController;
import com.agile.tem.common.core.controller.exception.BizException;
import com.agile.tem.common.core.util.R;
import com.baomidou.mybatisplus.core.metadata.IPage;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.web.bind.annotation.*;

import java.util.Objects;


/**
 * 企业信息表 前端控制器
 *
 * @author wenbinglei
 * @date 2022-04-26 16:16:45
 */
@Slf4j
@RestController
@RequestMapping("/api" )
@Api(value = "company", tags = "企业信息表管理")
public class SysCompanyController extends SuperController {

    private final ISysCompanyService sysCompanyService;

    public SysCompanyController(ISysCompanyService sysCompanyService) {
        this.sysCompanyService = sysCompanyService;
    }

    /**
     * 新增企业信息表
     * @param companyDTO 企业信息表
     * @return
     */
    @ApiOperation(value = "新增企业信息表", notes = "新增企业信息表")
    @PostMapping("/sysCompany")
    public R<SysCompanyDTO> createSysCompany(@RequestBody SysCompanyDTO companyDTO) {
        log.debug("REST request to save Company : {}", companyDTO);
        if (companyDTO.getId() != null) {
            throw new BizException("不能包含主键");
        }
        SysCompany data = SysCompanyConverter.INSTANCE.from(companyDTO);
        data.setCreateTime((int) (System.currentTimeMillis()/1000));
        data.setState("未审核");
        boolean result = sysCompanyService.save(data);
        if(result) {
            companyDTO.setId(data.getId());
            return R.ok(companyDTO, "添加成功");
        } else {
            return R.failed(companyDTO, "添加失败");
        }
    }

    /**
     * 修改企业信息表
     * @param companyDTO 企业信息表
     * @return
     */
    @ApiOperation(value = "修改企业信息表", notes = "修改企业信息表")
    @PutMapping("/sysCompany")
    public R<SysCompanyDTO> updateSysCompany(@RequestBody SysCompanyDTO companyDTO) {
        log.debug("REST request to update Company : {}", companyDTO);
        if (companyDTO.getId() == null) {
            throw new BizException("缺少主键");
        }
        SysCompany data = SysCompanyConverter.INSTANCE.from(companyDTO);
        return sysCompanyService.updateById(data) ? R.ok(companyDTO, "修改成功") : R.failed(companyDTO, "修改失败");
    }

    /**
     * 根据查询条件获取分页数据
     * @param queryDTO 企业信息表
     * @return
     */
    @ApiOperation(value = "分页查询企业信息表", notes = "分页查询企业信息表")
    // @JsonFieldFilter(type = CompanyDTO.class, include = {"id", ""})
    // @JsonFieldFilter(type = CompanyDTO.class, exclude = {"id", ""})
    // @JsonFieldFilter(type = IPage.class, exclude = {"optimizeCountSql", "hitCount", "orders", "searchCount"})
    // @JsonFieldFilters( value = {
    //     @JsonFieldFilter(type = CompanyDTO.class, include = {"id", "username", "mobile"}),
    //     @JsonFieldFilter(type = CompanyDTO.class, include = {"id", "username", "mobile"})
    // })
    // @Desensitization
    @GetMapping("/sysCompanies")
    public R<IPage<SysCompanyDTO>> getAllSysCompanies(SysCompanyQueryDTO queryDTO) {
        log.debug("REST request to get a page of Companys");
        String[] ascParameters = null;
        String[] descParameters = null;
        if(StringUtils.isNotBlank(queryDTO.getAscParameter())) {
            ascParameters = new String[] {queryDTO.getAscParameter()};
        }
        if(StringUtils.isNotBlank(queryDTO.getDescParameter())) {
            descParameters = new String[] {queryDTO.getDescParameter()};
        }
        IPage<SysCompanyDTO> result = sysCompanyService.lambdaQuery()
                .or(StringUtils.isNotEmpty(queryDTO.getKeyWord()), o -> o.like(SysCompany::getName, queryDTO.getKeyWord()).or().like(SysCompany::getContactName, queryDTO.getKeyWord()).or().like(SysCompany::getContactMobile, queryDTO.getKeyWord()))
//                .like(StringUtils.isNotEmpty(queryDTO.getName()), Company::getName, queryDTO.getName())
                .eq(StringUtils.isNotEmpty(queryDTO.getProvince()), SysCompany::getProvince, queryDTO.getProvince())
                .eq(StringUtils.isNotEmpty(queryDTO.getState()), SysCompany::getState, queryDTO.getState())
                .eq(Objects.nonNull(queryDTO.getAccountId()), SysCompany::getAccountId, queryDTO.getAccountId())
                .page(this.<SysCompany>getPage(queryDTO.getCursor(), queryDTO.getLimit(), queryDTO.getSearchCount(), ascParameters, descParameters))
                .convert(dto -> SysCompanyConverter.INSTANCE.to(dto));
        return R.ok(result, "查询列表成功");
    }

    /**
     * 根据ID获取企业信息表
     * @param id id
     * @return
     */
    @ApiOperation(value = "通过id查询企业信息表", notes = "通过id查询企业信息表")
    // @JsonFieldFilter(type = CompanyDTO.class, include = {"id", ""})
    // @JsonFieldFilter(type = CompanyDTO.class, exclude = {"id", ""})
    // @JsonFieldFilters( value = {
    //     @JsonFieldFilter(type = CompanyDTO.class, include = {"id", "username", "mobile"}),
    //     @JsonFieldFilter(type = CompanyDTO.class, include = {"id", "username", "mobile"})
    // })
    // @Desensitization
    @GetMapping("/sysCompany/{id}")
    public R<SysCompanyDTO> getSysCompany(@PathVariable Long id) {
        log.debug("REST request to get Company : {}", id);
        SysCompany company = sysCompanyService.getById(id);
        return company == null ? R.failed("未查询到数据") : R.ok(SysCompanyConverter.INSTANCE.to(company), "查询成功");
    }

    /**
     * 通过id删除企业信息表
     * @param id id
     * @return
     */
    @ApiOperation(value = "通过id删除企业信息表", notes = "通过id删除企业信息表")
    @DeleteMapping("/sysCompany/{id}")
    public R deleteSysCompany(@PathVariable Long id) {
        log.debug("REST request to delete Companys : {}", id);
        return sysCompanyService.removeById(id) ? R.ok("删除成功") : R.failed("删除失败");
    }
}
