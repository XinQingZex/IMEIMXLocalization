package com.agile.qdmp.standalong.controller.account;

import com.agile.qdmp.standalong.model.dto.account.LoginInfoDTO;
import com.agile.qdmp.standalong.model.dto.account.query.LoginInfoQueryDTO;
import com.agile.qdmp.standalong.model.dto.rbac.AccountRoleDTO;
import com.agile.qdmp.standalong.model.convert.account.LoginInfoConverter;
import com.agile.qdmp.standalong.model.convert.rbac.AccountRoleConverter;
import com.agile.qdmp.standalong.model.entity.account.LoginInfo;
import com.agile.qdmp.standalong.model.entity.rbac.AccountRole;
import com.agile.qdmp.standalong.service.account.ILoginInfoService;
import com.agile.qdmp.standalong.service.rbac.IAccountRoleService;
import com.agile.tem.common.core.controller.SuperController;
import com.agile.tem.common.core.controller.exception.BizException;
import com.agile.tem.common.core.util.R;
import com.baomidou.mybatisplus.core.metadata.IPage;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;


/**
 * 用户登录信息表 前端控制器
 *
 * @author wenbinglei
 * @date 2021-03-23 18:00:31
 */
@Slf4j
@RestController
@RequestMapping("/api" )
@Api(value = "loginInfo", tags = "用户登录信息表管理")
public class LoginInfoController extends SuperController {

    private final ILoginInfoService loginInfoService;
    private final IAccountRoleService accountRoleService;

    public LoginInfoController(ILoginInfoService loginInfoService, IAccountRoleService accountRoleService) {
        this.loginInfoService = loginInfoService;
        this.accountRoleService = accountRoleService;
    }

    /**
     * 新增用户登录信息表
     * @param loginInfoDTO 用户登录信息表
     * @return
     */
    @ApiOperation(value = "新增用户登录信息表", notes = "新增用户登录信息表")
    @PostMapping("/loginInfo")
    public R<LoginInfoDTO> createLoginInfo(@RequestBody LoginInfoDTO loginInfoDTO) {
        log.debug("REST request to save LoginInfo : {}", loginInfoDTO);
        if (loginInfoDTO.getId() != null) {
            throw new BizException("不应该存在主键");
        }
        R<LoginInfo> checkResult = loginInfoService.checkLoginInfoData(LoginInfoConverter.INSTANCE.from(loginInfoDTO));
        if(checkResult.getCode() == 1) {
            return R.failed(loginInfoDTO, checkResult.getMsg());
        }
        LoginInfo data = LoginInfoConverter.INSTANCE.from(loginInfoDTO);
        boolean result = loginInfoService.save(data);
        if(result) {
            loginInfoDTO.setId(data.getId());
            return R.ok(loginInfoDTO);
        } else {
            return R.failed(loginInfoDTO, "注册失败");
        }
    }

    /**
     * 修改用户登录信息表
     * @param loginInfoDTO 用户登录信息表
     * @return
     */
    @ApiOperation(value = "修改用户登录信息表", notes = "修改用户登录信息表")
    @PutMapping("/loginInfo")
    public R<LoginInfoDTO> updateLoginInfo(@RequestBody LoginInfoDTO loginInfoDTO) {
        log.debug("REST request to update LoginInfo : {}", loginInfoDTO);
        if (loginInfoDTO.getId() == null) {
            throw new BizException("id null");
        }
        R<LoginInfo> checkResult = loginInfoService.checkLoginInfoData(LoginInfoConverter.INSTANCE.from(loginInfoDTO));
        if(checkResult.getCode() == 1) {
            return R.failed(loginInfoDTO, checkResult.getMsg());
        }
        LoginInfo data = LoginInfoConverter.INSTANCE.from(loginInfoDTO);
        boolean result = loginInfoService.updateById(data);
        if(result) {
            return R.ok(loginInfoDTO);
        } else {
            return R.failed(loginInfoDTO, "修改失败");
        }
    }

    /**
     * 根据查询条件获取分页数据
     * @param queryDTO 用户登录信息表
     * @return
     */
    @ApiOperation(value = "分页查询", notes = "分页查询")
    @GetMapping("/loginInfoes")
    public R<IPage<LoginInfoDTO>> getAllLoginInfos(LoginInfoQueryDTO queryDTO) {
        log.debug("REST request to get a page of LoginInfoes");
        String[] ascParameters = null;
        String[] descParameters = null;
        if(StringUtils.isNotBlank(queryDTO.getAscParameter())) {
            ascParameters = new String[] {queryDTO.getAscParameter()};
        }
        if(StringUtils.isNotBlank(queryDTO.getDescParameter())) {
            descParameters = new String[] {queryDTO.getDescParameter()};
        }
        IPage<LoginInfoDTO> result = loginInfoService.lambdaQuery()
                .or(StringUtils.isNotEmpty(queryDTO.getKeyWord()), o-> o.like(LoginInfo::getUsername, queryDTO.getKeyWord()).or().like(LoginInfo::getMobile, queryDTO.getKeyWord()).or().like(LoginInfo::getNickname, queryDTO.getKeyWord()))
                .eq(StringUtils.isNotEmpty(queryDTO.getUserSource()), LoginInfo::getUserSource, queryDTO.getUserSource())
                .page(this.<LoginInfo>getPage(queryDTO.getCursor(), queryDTO.getLimit(), queryDTO.getSearchCount(), ascParameters, descParameters))
                .convert(dto -> LoginInfoConverter.INSTANCE.to(dto));
        return R.ok(result);
    }

    /**
     * 根据ID获取用户登录信息表
     * @param id id
     * @return
     */
    @ApiOperation(value = "通过id查询", notes = "通过id查询")
    @GetMapping("/loginInfo/{id}")
    public R<LoginInfoDTO> getLoginInfo(@PathVariable Long id) {
        log.debug("REST request to get LoginInfo : {}", id);
        LoginInfo loginInfo = loginInfoService.getById(id);
        return loginInfo == null ? R.failed("未找到数据") : R.ok(LoginInfoConverter.INSTANCE.to(loginInfo));
    }

    /**
     * 通过id删除用户登录信息表
     * @param id id
     * @return
     */
    @ApiOperation(value = "通过id删除用户登录信息表", notes = "通过id删除用户登录信息表")
    @DeleteMapping("/loginInfo/{id}")
    public R<Void> deleteLoginInfo(@PathVariable Long id) {
        log.debug("REST request to delete LoginInfo : {}", id);
        return loginInfoService.removeById(id) ? R.ok() : R.failed();
    }

    /**
     * 根据userName获取用户登录信息
     * @param username username
     * @return
     */
    @ApiOperation(value = "根据userName获取用户登录信息", notes = "根据userName获取用户登录信息")
    @GetMapping("/loginInfo/username/{username}")
    public R<LoginInfoDTO> getLoginInfoByUserName(@PathVariable(value = "username") String username) {
        log.debug("REST request to get LoginInfo : {}", username);
        Optional<LoginInfo> loginInfoOpt = loginInfoService.lambdaQuery().eq(LoginInfo::getUsername, username).oneOpt();
        return loginInfoOpt.map(data -> R.ok(LoginInfoConverter.INSTANCE.to(data))).orElse(R.failed("未找到数据"));
    }

    /**
     * 根据手机号返回用账户信息
     * @param mobile mobile
     * @return
     */
    @ApiOperation(value = "根据userName获取用户登录信息", notes = "根据userName获取用户登录信息")
    @GetMapping("/loginInfo/mobile/{mobile}")
    public R<LoginInfoDTO> getLoginInfoByMobile(@PathVariable(value = "mobile") String mobile) {
        log.debug("REST request to get LoginInfo : {}", mobile);
        Optional<LoginInfo> loginInfoOpt = loginInfoService.lambdaQuery().eq(LoginInfo::getMobile, mobile).oneOpt();
        return loginInfoOpt.map(data -> R.ok(LoginInfoConverter.INSTANCE.to(data))).orElse(R.failed("未找到数据"));
    }

//    /**
//     * 根据用户名返回用账户信息带角色列表
//     * @param userName
//     * @param systemName
//     * @return
//     */
//    @ApiOperation(value = "根据用户名返回用账户信息带角色列表", hidden = true)
//    @GetMapping("/feign/loginInfo/username/authorities")
//    public LoginInfoDTO getAccountWithAuthoritiesByUsername(@RequestParam("userName") String userName, @RequestParam(value="systemName", required=false) String systemName) {
//        LoginInfo info = loginInfoService.lambdaQuery().eq(LoginInfo::getUsername, userName).select(LoginInfo::getId, LoginInfo::getMobile, LoginInfo::getUsername, LoginInfo::getNickname, LoginInfo::getPassword, LoginInfo::getAvatar, LoginInfo::getPassword, LoginInfo::getActivated).one();
//        if(info == null) {
//            return null;
//        } else {
//            LoginInfoDTO infoDTO = LoginInfoConverter.INSTANCE.to(info);
//            List<AccountRole> accountRoles = accountRoleService.lambdaQuery()
//                    .eq(StringUtils.isNotEmpty(systemName), AccountRole::getSystemName, systemName)
//                    .eq(AccountRole::getAccountId, info.getId())
//                    .orderByDesc(AccountRole::getId)
//                    .list();
//            List<AccountRoleDTO> roles = accountRoles == null || accountRoles.size() == 0 ? null : AccountRoleConverter.INSTANCE.to(accountRoles);
//            infoDTO.setRoles(roles);
//            return infoDTO;
//        }
//    }

//    /**
//     * 根据手机号返回用账户信息带角色列表
//     * @param mobile
//     * @param systemName
//     * @return
//     */
//    @ApiOperation(value = "根据用户名返回用账户信息带角色列表", hidden = true)
//    @GetMapping("/feign/loginInfo/mobile/authorities")
//    public LoginInfoDTO getAccountWithAuthoritiesByMobile(@RequestParam("mobile") String mobile, @RequestParam(value="systemName") String systemName) {
//        LoginInfo info = loginInfoService.lambdaQuery().eq(LoginInfo::getMobile, mobile).select(LoginInfo::getId, LoginInfo::getUsername, LoginInfo::getNickname, LoginInfo::getPassword, LoginInfo::getAvatar, LoginInfo::getPassword, LoginInfo::getActivated).one();
//        if(info == null) {
//            return null;
//        } else {
//            LoginInfoDTO infoDTO = LoginInfoConverter.INSTANCE.to(info);
//            List<AccountRole> accountRoles = accountRoleService.lambdaQuery()
//                .eq(StringUtils.isNotEmpty(systemName), AccountRole::getSystemName, systemName)
//                .eq(AccountRole::getAccountId, info.getId())
//                .orderByDesc(AccountRole::getId)
//                .list();
//            List<AccountRoleDTO> roles = accountRoles == null || accountRoles.size() == 0 ? null : AccountRoleConverter.INSTANCE.to(accountRoles);
//            infoDTO.setRoles(roles);
//            return infoDTO;
//        }
//    }
}
